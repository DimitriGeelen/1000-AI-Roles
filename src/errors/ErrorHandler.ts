// Main Error Handler for categorizing and processing errors

import { AgentError, ErrorContext } from '../types';
import { ErrorLogger } from './ErrorLogger';
import { ErrorRecovery } from './ErrorRecovery';
import { UserMessageGenerator } from './UserMessageGenerator';

export class ErrorHandler {
  private logger: ErrorLogger;
  private recovery: ErrorRecovery;
  private messageGenerator: UserMessageGenerator;

  constructor(
    logger: ErrorLogger,
    recovery: ErrorRecovery,
    messageGenerator: UserMessageGenerator
  ) {
    this.logger = logger;
    this.recovery = recovery;
    this.messageGenerator = messageGenerator;
  }

  public categorizeError(error: Error, context: ErrorContext): AgentError {
    let category: AgentError['category'] = 'UNKNOWN';
    let severity: AgentError['severity'] = 'MEDIUM';
    let code = 'UNKNOWN_ERROR';
    let recoverable = false;

    const message = error.message.toLowerCase();

    // Categorize based on error patterns
    if (this.isAuthError(error, context)) {
      category = 'AUTH';
      severity = this.determineAuthSeverity(error, context);
      code = this.generateAuthErrorCode(error, context);
      recoverable = true;
    } else if (this.isNetworkError(error, context)) {
      category = 'NETWORK';
      severity = 'HIGH';
      code = this.generateNetworkErrorCode(error);
      recoverable = true;
    } else if (this.isValidationError(error, context)) {
      category = 'VALIDATION';
      severity = 'MEDIUM';
      code = this.generateValidationErrorCode(error);
      recoverable = true;
    } else if (this.isRateLimitError(error, context)) {
      category = 'RATE_LIMIT';
      severity = 'MEDIUM';
      code = 'RATE_LIMITED';
      recoverable = true;
    } else if (this.isApiError(error, context)) {
      category = 'API';
      severity = this.determineApiSeverity(context);
      code = this.generateApiErrorCode(error, context);
      recoverable = context.statusCode ? context.statusCode >= 500 : true;
    } else if (this.isCriticalError(error, context)) {
      category = 'UNKNOWN';
      severity = 'CRITICAL';
      code = this.generateCriticalErrorCode(error);
      recoverable = false;
    }

    const agentError: AgentError = {
      code,
      message: error.message,
      category,
      severity,
      context,
      userMessage: '', // Will be generated by UserMessageGenerator
      recoverable,
    };

    // Generate user-friendly message
    agentError.userMessage = this.messageGenerator.generateUserMessage(agentError);

    // Log the error
    this.logger.logError(agentError);

    return agentError;
  }

  private isAuthError(error: Error, context: ErrorContext): boolean {
    const message = error.message.toLowerCase();
    return (
      message.includes('authentication') ||
      message.includes('unauthorized') ||
      message.includes('invalid credentials') ||
      message.includes('token') ||
      message.includes('auth') ||
      context.statusCode === 401 ||
      context.statusCode === 403
    );
  }

  private isNetworkError(error: Error, context: ErrorContext): boolean {
    const message = error.message.toLowerCase();
    return (
      message.includes('econnrefused') ||
      message.includes('network') ||
      message.includes('timeout') ||
      message.includes('connection') ||
      message.includes('dns') ||
      message.includes('socket') ||
      !context.statusCode // No status code usually means network issue
    );
  }

  private isValidationError(error: Error, context: ErrorContext): boolean {
    const message = error.message.toLowerCase();
    return (
      message.includes('validation') ||
      message.includes('required') ||
      message.includes('invalid') ||
      message.includes('missing') ||
      context.statusCode === 400
    );
  }

  private isRateLimitError(error: Error, context: ErrorContext): boolean {
    const message = error.message.toLowerCase();
    return (
      message.includes('rate limit') ||
      message.includes('too many') ||
      context.statusCode === 429
    );
  }

  private isApiError(error: Error, context: ErrorContext): boolean {
    return context.statusCode !== undefined && context.statusCode >= 400;
  }

  private isCriticalError(error: Error, context: ErrorContext): boolean {
    const message = error.message.toLowerCase();
    return (
      message.includes('security') ||
      message.includes('bypass') ||
      message.includes('corruption') ||
      message.includes('memory') ||
      message.includes('system')
    );
  }

  private determineAuthSeverity(error: Error, context: ErrorContext): AgentError['severity'] {
    const message = error.message.toLowerCase();
    if (message.includes('bypass') || message.includes('security')) {
      return 'CRITICAL';
    }
    return 'HIGH';
  }

  private determineApiSeverity(context: ErrorContext): AgentError['severity'] {
    if (!context.statusCode) return 'MEDIUM';
    
    if (context.statusCode >= 500) return 'HIGH';
    if (context.statusCode === 404) return 'MEDIUM';
    if (context.statusCode === 403) return 'HIGH';
    return 'MEDIUM';
  }

  private generateAuthErrorCode(error: Error, context: ErrorContext): string {
    const message = error.message.toLowerCase();
    if (message.includes('expired')) return 'AUTH_EXPIRED';
    if (message.includes('invalid')) return 'AUTH_INVALID';
    if (message.includes('bypass')) return 'AUTH_SECURITY_VIOLATION';
    if (context.statusCode === 401) return 'AUTH_UNAUTHORIZED';
    if (context.statusCode === 403) return 'AUTH_FORBIDDEN';
    return 'AUTH_FAILED';
  }

  private generateNetworkErrorCode(error: Error): string {
    const message = error.message.toLowerCase();
    if (message.includes('timeout')) return 'NETWORK_TIMEOUT';
    if (message.includes('econnrefused')) return 'NETWORK_CONNECTION_REFUSED';
    if (message.includes('dns')) return 'NETWORK_DNS_ERROR';
    return 'NETWORK_ERROR';
  }

  private generateValidationErrorCode(error: Error): string {
    const message = error.message.toLowerCase();
    if (message.includes('required')) return 'VALIDATION_REQUIRED_FIELD';
    if (message.includes('format')) return 'VALIDATION_FORMAT_ERROR';
    return 'VALIDATION_FAILED';
  }

  private generateApiErrorCode(error: Error, context: ErrorContext): string {
    if (!context.statusCode) return 'API_ERROR';
    
    switch (context.statusCode) {
      case 404: return 'API_NOT_FOUND';
      case 409: return 'API_CONFLICT';
      case 422: return 'API_UNPROCESSABLE';
      case 500: return 'API_INTERNAL_ERROR';
      case 502: return 'API_BAD_GATEWAY';
      case 503: return 'API_SERVICE_UNAVAILABLE';
      default: return `API_HTTP_${context.statusCode}`;
    }
  }

  private generateCriticalErrorCode(error: Error): string {
    const message = error.message.toLowerCase();
    if (message.includes('security')) return 'CRITICAL_SECURITY';
    if (message.includes('corruption')) return 'CRITICAL_DATA_CORRUPTION';
    if (message.includes('memory')) return 'CRITICAL_MEMORY';
    return 'CRITICAL_SYSTEM';
  }
}